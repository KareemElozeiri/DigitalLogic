module fsm(input logic clk, dip_enable,dip_up,push_reset,push_add5,logic [3:0]q0,q1,
output logic reset,enable,up,load0,logic [3:0] load0_value,logic load1,logic [3:0] load1_value);

typedef enum {s0,s1,s2,s3,s4,s5} state_type;

state_type current_state, next_state;
always_ff@(posedge clk,posedge push_reset)
begin 
	if(push_reset == 1'b1)
		current_state <= s0;
	else
		current_state <= next_state;
end 


////////next-state logic combined with the output logic /////////
always_comb begin 
	next_state = current_state;
	case(current_state)
		s0:
			begin
				reset = 1;
				enable = 0;
				load0 = 0;
				load1 = 0;
				load0_value = 4'b0000;
				load1_value = 4'b0000;
				up = 1;
				
				if(push_reset == 1'b1)
					next_state = s0;
				else if(dip_enable == 1'b1)
					next_state = s1;
				else if(dip_enable == 1'b0)
					next_state = s0;
			end
		s1:
			begin 
				reset = 0;
				load0 = 0;
				load1 = 0;
				load0_value = 4'b0000;
				load1_value = 4'b0000;
				
				enable = 1;
				
				if(push_reset == 1'b1)
					next_state = s0;
				else if(dip_up == 1'b1)
					next_state = s2; 
				else if(dip_up == 1'b0)
					next_state = s3; 
			end 
		s2:
			begin
				reset = 0;
				load0 = 0;
				load1 = 0;
				up = 1'b1;
				enable = 1'b1;
				
				if(push_reset == 1'b1)
					next_state = s0;
				else if(dip_enable == 1'b0)
					next_state = s4; 
			end 
		s3:
			begin 
				reset = 0;
				load0 = 0;
				load1 = 0;
				load0_value = 4'b0000;
				load1_value = 4'b0000;
				
				up = 1'b0;
				enable = 1'b1;

				if(push_reset == 1'b1)
					next_state = s0;
				else if(dip_enable == 1'b0)
					next_state = s4;
			end 
		s4:
			begin 
				reset = 0;
				load0 = 0;
				load1 = 0;
				
				enable = 1'b0;
				
				if(push_reset == 1'b1)
					next_state = s0;
				else if(push_add5==1'b1)
					next_state = s5;
				if(dip_enable == 1'b1)
					begin
						if(dip_up == 1'b1)
							next_state = s2;
						else  
							next_state = s3;
					end 
			end 
		s5:
			begin 
				reset = 0;
				
				if(q0+5>9)
					begin
						load0 = 1;
						load1 = 1;
						load0_value = q0-4;
						load1_value = q1+1;
					end
				else 
					begin
						load0 = 1;
						load0_value = q0 + 5;
						load1 = 0;
						load1_value = 4'b0000;
					end 
			
				if(push_reset == 1'b1)
					next_state = s0;
				else 
					next_state = s4;
			end 
		default:
			begin
				next_state = s0;
			end 
	endcase 
end 

endmodule